/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SmartWalletABIInterface extends ethers.utils.Interface {
  functions: {
    "DATA_VERSION_HASH()": FunctionFragment;
    "directExecute(address,bytes)": FunctionFragment;
    "execute(bytes32,bytes32,(address,address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes)": FunctionFragment;
    "initialize(address,address,address,uint256,uint256)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "nonce()": FunctionFragment;
    "recover(address,address,address,address,uint256,bytes)": FunctionFragment;
    "verify(bytes32,bytes32,(address,address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DATA_VERSION_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "directExecute",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [
      BytesLike,
      BytesLike,
      {
        relayHub: string;
        from: string;
        to: string;
        tokenContract: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        tokenAmount: BigNumberish;
        tokenGas: BigNumberish;
        data: BytesLike;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recover",
    values: [string, string, string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [
      BytesLike,
      BytesLike,
      {
        relayHub: string;
        from: string;
        to: string;
        tokenContract: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        tokenAmount: BigNumberish;
        tokenGas: BigNumberish;
        data: BytesLike;
      },
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DATA_VERSION_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "directExecute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recover", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {};
}

export class SmartWalletABI extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SmartWalletABIInterface;

  functions: {
    DATA_VERSION_HASH(overrides?: CallOverrides): Promise<[string]>;

    directExecute(
      to: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execute(
      domainSeparator: BytesLike,
      suffixData: BytesLike,
      req: {
        relayHub: string;
        from: string;
        to: string;
        tokenContract: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        tokenAmount: BigNumberish;
        tokenGas: BigNumberish;
        data: BytesLike;
      },
      sig: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      owner: string,
      tokenAddr: string,
      tokenRecipient: string,
      tokenAmount: BigNumberish,
      tokenGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    recover(
      owner: string,
      factory: string,
      swTemplate: string,
      destinationContract: string,
      index: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verify(
      domainSeparator: BytesLike,
      suffixData: BytesLike,
      req: {
        relayHub: string;
        from: string;
        to: string;
        tokenContract: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        tokenAmount: BigNumberish;
        tokenGas: BigNumberish;
        data: BytesLike;
      },
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  DATA_VERSION_HASH(overrides?: CallOverrides): Promise<string>;

  directExecute(
    to: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execute(
    domainSeparator: BytesLike,
    suffixData: BytesLike,
    req: {
      relayHub: string;
      from: string;
      to: string;
      tokenContract: string;
      value: BigNumberish;
      gas: BigNumberish;
      nonce: BigNumberish;
      tokenAmount: BigNumberish;
      tokenGas: BigNumberish;
      data: BytesLike;
    },
    sig: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    owner: string,
    tokenAddr: string,
    tokenRecipient: string,
    tokenAmount: BigNumberish,
    tokenGas: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  recover(
    owner: string,
    factory: string,
    swTemplate: string,
    destinationContract: string,
    index: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verify(
    domainSeparator: BytesLike,
    suffixData: BytesLike,
    req: {
      relayHub: string;
      from: string;
      to: string;
      tokenContract: string;
      value: BigNumberish;
      gas: BigNumberish;
      nonce: BigNumberish;
      tokenAmount: BigNumberish;
      tokenGas: BigNumberish;
      data: BytesLike;
    },
    sig: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    DATA_VERSION_HASH(overrides?: CallOverrides): Promise<string>;

    directExecute(
      to: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; ret: string }>;

    execute(
      domainSeparator: BytesLike,
      suffixData: BytesLike,
      req: {
        relayHub: string;
        from: string;
        to: string;
        tokenContract: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        tokenAmount: BigNumberish;
        tokenGas: BigNumberish;
        data: BytesLike;
      },
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; ret: string }>;

    initialize(
      owner: string,
      tokenAddr: string,
      tokenRecipient: string,
      tokenAmount: BigNumberish,
      tokenGas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    recover(
      owner: string,
      factory: string,
      swTemplate: string,
      destinationContract: string,
      index: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; ret: string }>;

    verify(
      domainSeparator: BytesLike,
      suffixData: BytesLike,
      req: {
        relayHub: string;
        from: string;
        to: string;
        tokenContract: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        tokenAmount: BigNumberish;
        tokenGas: BigNumberish;
        data: BytesLike;
      },
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    DATA_VERSION_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    directExecute(
      to: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execute(
      domainSeparator: BytesLike,
      suffixData: BytesLike,
      req: {
        relayHub: string;
        from: string;
        to: string;
        tokenContract: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        tokenAmount: BigNumberish;
        tokenGas: BigNumberish;
        data: BytesLike;
      },
      sig: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      owner: string,
      tokenAddr: string,
      tokenRecipient: string,
      tokenAmount: BigNumberish,
      tokenGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    recover(
      owner: string,
      factory: string,
      swTemplate: string,
      destinationContract: string,
      index: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verify(
      domainSeparator: BytesLike,
      suffixData: BytesLike,
      req: {
        relayHub: string;
        from: string;
        to: string;
        tokenContract: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        tokenAmount: BigNumberish;
        tokenGas: BigNumberish;
        data: BytesLike;
      },
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DATA_VERSION_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    directExecute(
      to: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      domainSeparator: BytesLike,
      suffixData: BytesLike,
      req: {
        relayHub: string;
        from: string;
        to: string;
        tokenContract: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        tokenAmount: BigNumberish;
        tokenGas: BigNumberish;
        data: BytesLike;
      },
      sig: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      owner: string,
      tokenAddr: string,
      tokenRecipient: string,
      tokenAmount: BigNumberish,
      tokenGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recover(
      owner: string,
      factory: string,
      swTemplate: string,
      destinationContract: string,
      index: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verify(
      domainSeparator: BytesLike,
      suffixData: BytesLike,
      req: {
        relayHub: string;
        from: string;
        to: string;
        tokenContract: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        tokenAmount: BigNumberish;
        tokenGas: BigNumberish;
        data: BytesLike;
      },
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
